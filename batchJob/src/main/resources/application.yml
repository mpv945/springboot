#public-key: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJewm6RN+LKtZzzwFiI9E857VlhfGdmql2UaQHU5cz+StbK1HG+KDscVvdX0j7oKl9CJi84Gd3XRmHiQx+n2wNkCAwEAAQ==
public-key: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIMX6r11IGpGHkIodZLpkgRhH74DnlNUEQ+BW6BRBg/wTq9RJZHqJKcBvwmsKzQDiSIFV5rk+pusZGCjM1ishdECAwEAAQ==
spring:
  jpa:
    generate-ddl: true
    properties:
      hibernate:
        #hibernate.format_sql: true
        dialect: org.hibernate.dialect.MySQL57Dialect # 用对应数据的方言
        hbm2ddl:
          auto: update # spring2 使用hibernate 自动生成表 需要这样配置,上面的也要开启
        #cache:
          #use_second_level_cache: true # 是否开启二级缓存
          #use_query_cache: true #是否 Query（查询） 缓存
          #region:
            #factory_class: org.hibernate.cache.ehcache.EhCacheRegionFactory
    hibernate:
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
      ddl-auto: update #如果缺少表则自动建表；缺少列则自动添加列；
    show-sql: true #是否启用SQL语句的日志记录。
#  datasource 连接信息,具体参考https://blog.csdn.net/zhangjq520/article/details/53996178 和https://segmentfault.com/a/1190000004316491
  datasource:
    #url: jdbc:mysql://192.168.0.109:3306/spring_boot_batch?useSSL=false
    url: jdbc:mysql://192.168.2.206:3306/spring_boot_batch?useSSL=false
    username: root
    #password: 123456 #加密类在本项目DruidConfiguration
    #password: DpyMXZUfH4JOXJ3ZzLJv4KV1pLx6KbVv+gFJpmuGT5Ib5UowOedt/ES/TzNYoZnTfXFHIOyOYFmjdr4cNTZNbw==
    password: CoRNdxAc1U4litRk/oa0XWI+3FCn9rK1/nD4B9PG4m0LJ3o3qPm6u5dvxhsHm+61TbyyOYLPYrq4EC6y5VWTdw== #平板电脑
    driver-class-name: com.mysql.cj.jdbc.Driver
    continue-on-error: true #初始化数据库时是否发生错误时停止,true 表示忽略错误
    initialization-mode: ALWAYS #ALWAYS 始终初始化;EMBEDDED 仅初始化嵌入式数据库(H2数据库，SQLite);NEVER 不要初始化数据源
    #platform: #在架构资源中使用的平台（schema - $ {platform} .sql）
    schema: classpath:sql/ddl/user_table.sql #Schema（DDL）脚本资源引用
    #separator: ; #语句分隔符在SQL初始化脚本中(默认;）
    sql-script-encoding: UTF-8 #SQL脚本编码
    data: classpath:sql/dml/user_data.sql #Data（DML）脚本资源引用(多个,号隔开)
    #data-username: root
    #data-password: 123456
    #配置外部的数据源（数据源类别）
    #type: com.alibaba.druid.pool.DruidDataSource #如果druid-spring-boot-starter 可以不指定
    ## 配置druid log4j2 日志输出
    druid:
      #password: ${pwdMysql}
      #username: root
      ### 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      #filters: stat,wall,log4j
      #filter-class-names: stat,wall,log4j,config
      # config.file=http://127.0.0.1/druid-pool.properties 网络读取，要添加filters 的config过滤器
      connect-properties: #config.decrypt=true;config.decrypt.key=${public-key} # （启用加密，配置公钥。）
        config.decrypt: "true" #必须要双引号，这是个bug
        config.decrypt.key: ${public-key}
      filter:
        config:
          enabled: true #开启数据密码加密,启动ConfigFilter
        log4j2:
          enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
        ### 通过connectProperties属性来打开mergeSql功能；慢SQL记录
        stat: #状态
          enabled: true #stat 默认开启
          db-type: mysql
          log-slow-sql: true
          merge-sql: true
          slow-sql-millis: 5000
        wall: #防火墙
          enabled: true
          db-type: mysql
          config:
            delete-allow: true # 是否允许删除数据
            drop-table-allow: false #是否允许删除删除表
      #数据源具体配置
      #driver-class-name: com.mysql.cj.jdbc.Driver
      ### 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      ### 初始化大小，最小，最大
      initial-size: 5
      min-idle: 10
      max-active: 20
      ### 配置获取连接等待超时的时间，单位是毫秒
      max-wait: 60000
      ### 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 2000
      ### 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 600000
      #max-evictable-idle-time-millis: 900000
      validation-query: select 1 #SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: false
        login-username: haijun
        login-password: 12345
        allow: 127.0.0.1
        #deny:
      #WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        session-stat-enable: true
        session-stat-max-count: 1000
        #principal-session-name:
        #principal-cookie-name:
        profile-enable: true
  #thymeleaf 模板引擎配置
  thymeleaf:
      mode: HTML5 #默认为html，支持html，xml,text javascript
      encoding: UTF-8 #默认编码为UTF-8
      # 默认true ，开发配置为false，避免修改模板还要重启服务器
      cache: false
      # 默认 classpath:/templates/ 可以不配
      prefix: classpath:/templates/
  redis: # 基本用法参考CustomListener
    #database: 0 #默认为db0，可以不要配置
    # 默认为localhost
    host: localhost
    # 默认6379
    port: 6379
    #password: #默认为空，设置密码才设置
    #集群配置
    #cluster:
      #nodes:
  quartz: #定时任务配置（QuartzAutoConfiguration调用setQuartzProperties进行配置设定）
    job-store-type: jdbc
    jdbc:
      comment-prefix: QRTZ_
      initialize-schema: always #每次创建
      #schema:  # 官网默认配置好，初始化数据库
    properties:
      org:
        quartz:
          scheduler:
            instanceName: clusteredScheduler
            instanceId: AUTO
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_
            isClustered: true
            clusterCheckinInterval: 10000
            useProperties: false
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 25
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
logging: # spring boot.logging的实现就是Logback
  # 多环境日志 https://www.cnblogs.com/zheting/p/6707041.html
  config: classpath:log/log4j2-spring.xml #https://blog.csdn.net/qq_32096997/article/details/79824668 和 http://www.cnblogs.com/fengqiaoyebo/p/9599810.html
  #file: ${app.name:haijunDefault}.log #(采用相对路径方式将日志文件输出到【xx.log】)不存在就用默认的








